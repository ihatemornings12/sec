//
// Generated file, do not edit! Created by nedtool 5.0 from inet/security/TLS/TLSRecord.msg.
//

#ifndef __INET__TLS_TLSRECORD_M_H
#define __INET__TLS_TLSRECORD_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"

namespace inet {
namespace tls {
}
}
// }}


namespace inet {
namespace tls {

// cplusplus {{
 
    #define TLS_HEADER  5   // TLS header length
    #define TLS_VERSION 3   // TLS v1.2
    #define TLS_MAX_PLAINTEXT_LENGTH 16384 //Max Fragment size, 2^14B
// }}

/**
 * Struct generated from inet/security/TLS/TLSRecord.msg:39 by nedtool.
 */
struct ProtocolVersion
{
    ProtocolVersion();
    uint8_t major;
    uint8_t minor;
};

// helpers for local use
void __doPacking(omnetpp::cCommBuffer *b, const ProtocolVersion& a);
void __doUnpacking(omnetpp::cCommBuffer *b, ProtocolVersion& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProtocolVersion& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProtocolVersion& obj) { __doUnpacking(b, obj); }

/**
 * Enum generated from <tt>inet/security/TLS/TLSRecord.msg:45</tt> by nedtool.
 * <pre>
 * enum ContentType
 * {
 * 
 *     CHANGE_CIPHER_SPEC = 20;
 *     ALERT = 21;
 *     HANDSHAKE = 22;
 *     APPLICATION_DATA = 23;
 * }
 * </pre>
 */
enum ContentType {
    CHANGE_CIPHER_SPEC = 20,
    ALERT = 21,
    HANDSHAKE = 22,
    APPLICATION_DATA = 23
};

/**
 * Class generated from <tt>inet/security/TLS/TLSRecord.msg:53</tt> by nedtool.
 * <pre>
 * packet TLSRecord
 * {
 *     uint8_t headerLength = TLS_HEADER;
 *     uint8_t type @enum(ContentType);
 *     ProtocolVersion version;
 *     uint16_t length; //max 2^14 bytes
 * }
 * 
 * // *********************************************************************************
 * 
 * //struct TLSPlaintext {
 * //    uint8_t type @enum(ContentType);
 * //    ProtocolVersion version = {3, 3}; 
 * //    uint16 length;
 * //    opaque fragment[TLSPlaintext.length];
 * //};
 * 
 * // ***********************************************************************************
 * 
 * //
 * //   
 * //struct TLSCompressed {
 * //    ContentType type;
 * //    ProtocolVersion version;
 * //    uint16_t length; //increase no more than 1024 bytes -> 2^14+1024b
 * //    opaque fragment[TLSCompressed.length]; //TLSPlaintext.fragment
 *         //CompressionMethod.null
 * //};
 * 
 * //struct  TLSCiphertext {
 * //    ContentType type;
 * //    ProtocolVersion version;
 * //    uint16_t length;
 *     //select (SecurityParameters.cipher_type) {
 *     //    case stream: GenericStreamCipher;
 *     //    case block: GenericBlockCipher;
 *     //    case aead: GenericAEADCipher;
 *     //} fragment;
 * //};
 * 
 * //struct GenericStreamCipher {
 *     //  opaque content[TLSCompressed.length];
 *     //  opaque MAC[SecurityParameters.mac_length];
 * //};
 * 
 * //struct GenericBlockCipher {
 *     //    opaque IV[SecurityParameters.record_iv_length];
 *     //    block-ciphered struct {
 *     //      opaque content[TLSCompressed.length];
 *     //      opaque MAC[SecurityParameters.mac_length];
 *     //      uint8 padding[GenericBlockCipher.padding_length];
 *     //      uint8 padding_length;
 *     //    };
 * //};
 * 
 * //struct GenericAEADCipher {
 *     //    opaque nonce_explicit[SecurityParameters.record_iv_length];
 *     //    aead-ciphered struct {
 *     //        opaque content[TLSCompressed.length];
 *     //    };
 * //};
 * //
 * </pre>
 */
class TLSRecord : public ::omnetpp::cPacket
{
  protected:
    uint8_t headerLength;
    uint8_t type;
    ProtocolVersion version;
    uint16_t length;

  private:
    void copy(const TLSRecord& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TLSRecord&);

  public:
    TLSRecord(const char *name=nullptr, int kind=0);
    TLSRecord(const TLSRecord& other);
    virtual ~TLSRecord();
    TLSRecord& operator=(const TLSRecord& other);
    virtual TLSRecord *dup() const {return new TLSRecord(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual uint8_t getHeaderLength() const;
    virtual void setHeaderLength(uint8_t headerLength);
    virtual uint8_t getType() const;
    virtual void setType(uint8_t type);
    virtual ProtocolVersion& getVersion();
    virtual const ProtocolVersion& getVersion() const {return const_cast<TLSRecord*>(this)->getVersion();}
    virtual void setVersion(const ProtocolVersion& version);
    virtual uint16_t getLength() const;
    virtual void setLength(uint16_t length);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TLSRecord& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TLSRecord& obj) {obj.parsimUnpack(b);}

} // namespace tls
} // namespace inet

#endif // ifndef __INET__TLS_TLSRECORD_M_H

